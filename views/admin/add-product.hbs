<section class="container m-5">
  <div class="container mt-4">
    <div class="row">
      <d iv class="col-md-6">
        <h2 class="text-center">Add Product</h2>
        <form action="/admin/add-product" method="post" id="form" enctype="multipart/form-data">

          <div class="form-group">
            <label for="">Name</label>
            <input type="text" name="Name" class="form-control" id="name">
            <span id="errorName" style="color:red;"></span>

          </div>
          <div class="form-group">
            <label for="">Category Name</label>


            <select class="selectpicker product-add-catagory" style="width: 100%;height:35px" name="Category"
              id="category">
              <option value="" style="border-style:none">Select a Category</option>

              {{#each categories}}
              <option value="{{this.Category}}">{{this.Category}}</option>
              {{/each}}
            </select>
            <span id="errorCategory" style="color:red;"></span>

          </div>
          <div class="form-group">
            <label for="">Price</label>
            <input type="number" name="Price" class="form-control" id="price">
            <span id="errorPrice" style="color:red;"></span>

          </div>
          <div class="form-group">
            <label for="">Description</label>
            <input type="text" name="Description" class="form-control" id="description">
            <span id="errorDescription" style="color:red;"></span>

          </div>

          <div class="row">
            <div id="image-box1" class="image-container m-2 " style="height: 300px;width:300px;display:none;"></div>
            <button class="btn btn-outline-info" id="crop-btn1" style="width:20%; margin-top: 3px; display: none;"
              type="button">Crop</button>

            <div id="image-box2" class="image-container m-2 " style="height: 300px;width:300px;display:none;"></div>
            <button class="btn btn-outline-info" id="crop-btn2" style="width:20%; margin-top: 3px; display: none;"
              type="button">Crop</button>


            <div id="image-box3" class="image-container m-2 " style="height: 300px;width:300px;display:none;"></div>
            <button class="btn btn-outline-info" id="crop-btn3" style=" width:20%;margin-top: 3px; display: none;"
              type="button">Crop</button>


            <div id="image-box4" class="image-container m-2 " style="height: 300px;width:300px;display:none;"></div>
            <button class="btn btn-outline-info " id="crop-btn4" style="width:20%; margin-top: 3px; display: none;"
              type="button">Crop</button>



            <div class="m-4 col-lg-4 ">

              <label for="">Image</label><br>
              <img src="/product-images/{{product._id}}.jpg" style="width: 100px;height:100px" alt="" id="imgView1">

              <input type="file" id="id_image1" name="image1" class="img" accept="image/*"
                onchange="viewImage1(event)"><br>

              <div class="vald-info" id="info1"></div>
              <h5 class="error_form text-danger" id="image1_error_message"></h5>
            </div>



            <div class="mb-3  col-lg-4 mt-4">

              <label for="">Image</label><br>
              <img src="/product-images/{{product._id}}.jpg" style="width: 100px;height:100px" alt="" id="imgView2">

              <input type="file" id="id_image2" name="image2" class="img" accept="image/*"
                onchange="viewImage2(event)"><br>

              <div class="vald-info" id="info2"></div>
              <h5 class="error_form text-danger" id="image2_error_message"></h5>
            </div>


            <div class="m-4  col-lg-4 ">

              <label for="">Image</label><br>
              <img src="/product-images/{{product._id}}.jpg" style="width: 100px;height:100px" alt="" id="imgView3">

              <input type="file" id="id_image3" name="image3" class="img" accept="image/*"
                onchange="viewImage3(event)"><br>

              <div class="vald-info" id="info3"></div>
              <h5 class="error_form text-danger" id="image3_error_message"></h5>
            </div>


            <div class="mb-3  col-lg-4 mt-4">

              <label for="">Image</label><br>
              <img src="/product-images/{{product._id}}.jpg" style="width: 100px;height:100px" alt="" id="imgView4">

              <input type="file" id="id_image4" name="image4" class="img" accept="image/*"
                onchange="viewImage4(event)"><br>

              <div class="vald-info" id="info4"></div>
              <h5 class="error_form text-danger" id="image4_error_message"></h5>
            </div>







          </div>



          <button type="submit" class=" btn btn-success mt-4 product-add-submit" onclick="checkFile()">Submit</button>

        </form>
    </div>
  </div>
  </div>
</section>


<script>
  const name = document.getElementById("name");
  const category = document.getElementById("category");
  const price = document.getElementById("price");
  const description = document.getElementById("description");
  const form = document.getElementById("form")

  const error1 = document.getElementById("errorName");
  const error2 = document.getElementById("errorCategory")
  const error3 = document.getElementById("errorPrice");
  const error4 = document.getElementById("errorDescription")

  form.addEventListener('submit', (e) => {
    let message1 = []
    let message2 = []
    let message3 = []
    let message4 = []

    if (name.value === '' || name.value == null) {
      message1.push('Please Enter the Name')
    } if (category.value === '' || category.value == null) {
      message2.push('Please Enter the category')
    } if (price.value === '' || price.value === null) {
      message3.push('Please enter the Price')
    } else if (isNaN(price.value) || price.value < 200) {
      message3.push('Enter the correct input')
    }
    if (description.value === '' || description.value === null) {
      message4.push('Please Enter the Description')
    } else if (isNaN(description.value) === false) {
      message4.push('Please Enter Valid Description')
    }


    if (message1.length > 0) {
      e.preventDefault();
      error1.innerText = message1.join(' ')
    }
    else {
      error1.innerText = ' '

    } if (message2.length > 0) {
      e.preventDefault();
      error2.innerText = message2.join(' ')
    }
    else {
      error2.innerText = ' '

    } if (message3.length > 0) {
      e.preventDefault();
      error3.innerText = message3.join(' , ')
    }
    else {
      error3.innerText = ' '

    } if (message4.length > 0) {
      e.preventDefault();
      error4.innerText = message4.join(' ')
    }
    else {
      error4.innerText = ' ';

    }

  })



  function checkFile() {
    let fileInputField = document.getElementById("id_image1");

    if (fileInputField.files?.length === 0) {
      alert("Please select a file!")
      { { !--alertify.error('Warning notification message.'); --} }
    }

  }





</script>


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>

<script src="https://code.jquery.com/jquery-3.6.0.js" integrity="sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk="
  crossorigin="anonymous"></script>
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<script>
  //1
  const imagebox1 = document.getElementById('image-box1')
  const crop_btn1 = document.getElementById('crop-btn1')
  const input1 = document.getElementById('id_image1')
  function viewImage1(event) {


    var fileInput = document.getElementById('id_image1');

    var filePath = fileInput.value;
    var allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
    if (!allowedExtensions.exec(filePath)) {
      fileInput.value = '';
      swal("There is a problem!", "Please choose image file.");
      return false;
    } else {
      document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])

    }

  }


  // When user uploads the image this event will get triggered
  input1.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data1 = input1.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url1 = URL.createObjectURL(img_data1)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox1.innerHTML = `<img src="${url1}" id="image1" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image1 = document.getElementById('image1')

    // Displaying the image box
    document.getElementById('image-box1').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn1').style.display = 'block'
    // Hiding the Post button
    const cropper1 = new Cropper(image1, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
    })
    // When crop button is clicked this event will get triggered
    crop_btn1.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper1.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement1 = document.getElementById('id_image1');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file1 = new File([blob], img_data1.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container1 = new DataTransfer();
        // Add the cropped image file to the container
        container1.items.add(file1);
        // Replace the original image file with the new cropped image file
        fileInputElement1.files = container1.files;
        document.getElementById('imgView1').src = URL.createObjectURL(fileInputElement1.files[0])
        // Hide the cropper box
        document.getElementById('image-box1').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn1').style.display = 'none'
      })
    })
  })

  //2
  const imagebox2 = document.getElementById('image-box2')
  const crop_btn2 = document.getElementById('crop-btn2')
  const input2 = document.getElementById('id_image2')
  function viewImage2(event) {


    var fileInput2 = document.getElementById('id_image2');

    var filePath2 = fileInput2.value;
    var allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
    if (!allowedExtensions.exec(filePath2)) {
      fileInput2.value = '';
      swal("There is a problem!", "Please choose image file.");
      return false;
    } else {
      document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])

    }

  }


  // When user uploads the image this event will get triggered
  input2.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data2 = input2.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url2 = URL.createObjectURL(img_data2)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox2.innerHTML = `<img src="${url2}" id="image2" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image2 = document.getElementById('image2')

    // Displaying the image box
    document.getElementById('image-box2').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn2').style.display = 'block'
    // Hiding the Post button
    const cropper = new Cropper(image2, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
    })
    // When crop button is clicked this event will get triggered
    crop_btn2.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement2 = document.getElementById('id_image2');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file2 = new File([blob], img_data2.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container2 = new DataTransfer();
        // Add the cropped image file to the container
        container2.items.add(file2);
        // Replace the original image file with the new cropped image file
        fileInputElement2.files = container2.files;
        document.getElementById('imgView2').src = URL.createObjectURL(fileInputElement2.files[0])
        // Hide the cropper box
        document.getElementById('image-box2').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn2').style.display = 'none'
      })
    })
  })

  //3
  const imagebox3 = document.getElementById('image-box3')
  const crop_btn3 = document.getElementById('crop-btn3')
  const input3 = document.getElementById('id_image3')
  function viewImage3(event) {


    var fileInput3 = document.getElementById('id_image3');

    var filePath3 = fileInput3.value;
    var allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
    if (!allowedExtensions.exec(filePath3)) {
      fileInput3.value = '';
      swal("There is a problem!", "Please choose image file.");
      return false;
    } else {
      document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])

    }

  }


  // When user uploads the image this event will get triggered
  input3.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data3 = input3.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url3 = URL.createObjectURL(img_data3)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox3.innerHTML = `<img src="${url3}" id="image3" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image3 = document.getElementById('image3')

    // Displaying the image box
    document.getElementById('image-box3').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn3').style.display = 'block'
    // Hiding the Post button
    const cropper = new Cropper(image3, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
    })
    // When crop button is clicked this event will get triggered
    crop_btn3.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement3 = document.getElementById('id_image3');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file3 = new File([blob], img_data3.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container3 = new DataTransfer();
        // Add the cropped image file to the container
        container3.items.add(file3);
        // Replace the original image file with the new cropped image file
        fileInputElement3.files = container3.files;
        document.getElementById('imgView3').src = URL.createObjectURL(fileInputElement3.files[0])
        // Hide the cropper box
        document.getElementById('image-box3').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn3').style.display = 'none'
      })
    })
  })


  //4
  const imagebox4 = document.getElementById('image-box4')
  const crop_btn4 = document.getElementById('crop-btn4')
  const input4 = document.getElementById('id_image4')
  function viewImage4(event) {


    var fileInput4 = document.getElementById('id_image4');

    var filePath4 = fileInput4.value;
    var allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
    if (!allowedExtensions.exec(filePath4)) {
      fileInput4.value = '';
      swal("There is a problem!", "Please choose image file.");
      return false;
    } else {
      document.getElementById('imgView4').src = URL.createObjectURL(event.target.files[0])

    }

  }


  // When user uploads the image this event will get triggered
  input4.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data4 = input4.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url4 = URL.createObjectURL(img_data4)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox4.innerHTML = `<img src="${url4}" id="image4" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image4 = document.getElementById('image4')

    // Displaying the image box
    document.getElementById('image-box4').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn4').style.display = 'block'
    // Hiding the Post button
    const cropper = new Cropper(image4, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
    })
    // When crop button is clicked this event will get triggered
    crop_btn4.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement4 = document.getElementById('id_image4');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file4 = new File([blob], img_data4.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container4 = new DataTransfer();
        // Add the cropped image file to the container
        container4.items.add(file4);
        // Replace the original image file with the new cropped image file
        fileInputElement4.files = container4.files;
        document.getElementById('imgView4').src = URL.createObjectURL(fileInputElement4.files[0])
        // Hide the cropper box
        document.getElementById('image-box4').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn4').style.display = 'none'
      })
    })
  })


</script>